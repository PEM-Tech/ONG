const Usuario = require('../models/usuarioModel');
const connection = require("../config/database"); // Certifique-se de que a conex√£o est√° sendo importada
const jwt = require("jsonwebtoken");

class UsuarioController {

    async getAllUsuarios(req, res) {
        try {
            console.log("üîç Buscando todos os usu√°rios...");
            const usuarios = await Usuario.getAll();
            console.log("‚úÖ Usu√°rios encontrados:", usuarios);
            res.status(200).json(usuarios);
        } catch (error) {
            console.error("‚ùå Erro ao buscar usu√°rios:", error);
            res.status(500).json({ error: error.message });
        }
    }

    async getUsuarioById(req, res) {
        try {
            const { id } = req.params;
            console.log(`üîç Buscando usu√°rio com ID: ${id}`);
            const usuario = await Usuario.getById(id);
            if (!usuario) {
                console.log("‚ö† Usu√°rio n√£o encontrado.");
                return res.status(404).json({ error: 'Usu√°rio n√£o encontrado' });
            }
            console.log("‚úÖ Usu√°rio encontrado:", usuario);
            res.status(200).json(usuario);
        } catch (error) {
            console.error("‚ùå Erro ao buscar usu√°rio:", error);
            res.status(500).json({ error: error.message });
        }
    }

    async createUsuario(req, res) {
        try {
            console.log("üì• Recebendo dados no backend:", req.body);
            const { nome, email, senha, desabilitado, permissao } = req.body;

            if (!nome || !email || !senha) {
                console.log("‚ö† Campos obrigat√≥rios faltando.");
                return res.status(400).json({ error: "Nome, email e senha s√£o obrigat√≥rios." });
            }

            const novoUsuario = await Usuario.create(req.body);
            console.log("‚úÖ Usu√°rio cadastrado com sucesso:", novoUsuario);
            return res.status(201).json({
                message: "Usu√°rio cadastrado com sucesso!",
                usuario: novoUsuario
            });

        } catch (error) {
            console.error("‚ùå Erro ao criar usu√°rio:", error);
            if (error.message.includes("O email j√° est√° cadastrado")) {
                return res.status(409).json({ error: "Email j√° cadastrado. Tente outro." });
            }
            return res.status(500).json({ error: "Erro interno ao cadastrar usu√°rio. " + error.message });
        }
    }

    async updateUsuario(req, res) {
        try {
            const { id } = req.params;
            const dadosAtualizados = req.body;
            console.log(`üîÑ Atualizando usu√°rio ID: ${id} Dados recebidos:`, dadosAtualizados);

            if (!dadosAtualizados.nome || !dadosAtualizados.email) {
                console.log("‚ö† Nome e email s√£o obrigat√≥rios.");
                return res.status(400).json({ error: "Nome e email s√£o obrigat√≥rios." });
            }

            const usuarioAtualizado = await Usuario.update(id, dadosAtualizados);
            console.log("‚úÖ Usu√°rio atualizado:", usuarioAtualizado);
            res.status(200).json({ message: "Usu√°rio atualizado com sucesso!", usuario: usuarioAtualizado });

        } catch (error) {
            console.error("‚ùå Erro ao atualizar usu√°rio:", error);
            res.status(500).json({ error: error.message });
        }
    }

    async deleteUsuario(req, res) {
        try {
            const { id } = req.params;
            console.log(`üóë Excluindo usu√°rio com ID: ${id}`);

            const resultado = await Usuario.delete(id);
            console.log("‚úÖ Usu√°rio exclu√≠do com sucesso:", resultado);
            res.status(200).json({ message: "Usu√°rio deletado com sucesso!" });

        } catch (error) {
            console.error("‚ùå Erro ao deletar usu√°rio:", error);
            res.status(500).json({ error: error.message });
        }
    }

    async loginUsuario(req, res) {
        console.log("üì• Requisi√ß√£o recebida no backend:", req.body);
        const { email, senha } = req.body;
    
        try {
            const query = "SELECT * FROM usuarios WHERE email = ?";
            connection.query(query, [email], async (err, results) => {
                if (err) {
                    console.error("‚ùå Erro na consulta SQL:", err);
                    return res.status(500).json({ error: "Erro no servidor" });
                }
    
                if (results.length === 0) {
                    console.log("‚ö†Ô∏è Usu√°rio n√£o encontrado para o email:", email);
                    return res.status(401).json({ error: "Usu√°rio n√£o encontrado" });
                }
    
                const usuario = results[0];
    
                if (usuario.senha !== senha) {
                    console.log("‚ö†Ô∏è Senha incorreta para usu√°rio:", usuario.email);
                    return res.status(401).json({ error: "Senha incorreta" });
                }
    
                console.log("‚úÖ Login bem-sucedido para:", usuario.email);
    
                // üîπ Gerar token JWT com n√≠vel de acesso
                const token = jwt.sign(
                    { id: usuario.id, email: usuario.email, permissao: usuario.permissao }, 
                    "secreta", 
                    { expiresIn: "1h" }
                );
    
                // üîπ Salvar o token no banco de dados
                connection.query("UPDATE usuarios SET token = ? WHERE id = ?", [token, usuario.id]);
    
                res.json({ message: "Login bem-sucedido!", usuario, token });
            });
    
        } catch (error) {
            console.error("‚ùå Erro ao processar login:", error);
            res.status(500).json({ error: "Erro ao processar login" });
        }
    }

    async getUsuarioByToken(req, res) {
        const token = req.cookies.token || req.headers.authorization?.split(" ")[1];
    
        if (!token) {
            return res.status(401).json({ error: "Token n√£o fornecido" });
        }
    
        try {
            const decoded = jwt.verify(token, "secreta"); // Verifica o token
    
            const query = "SELECT * FROM usuarios WHERE id = ?";
            connection.query(query, [decoded.id], (err, results) => {
                if (err) {
                    console.error("‚ùå Erro na consulta SQL:", err);
                    return res.status(500).json({ error: "Erro no servidor" });
                }
    
                if (results.length === 0) {
                    console.log("‚ö†Ô∏è Usu√°rio n√£o encontrado.");
                    return res.status(404).json({ error: "Usu√°rio n√£o encontrado" });
                }
    
                console.log("‚úÖ Sess√£o restaurada:", results[0]);
                res.json({ usuario: results[0] });
            });
        } catch (error) {
            console.error("‚ùå Token inv√°lido ou expirado:", error);
            return res.status(401).json({ error: "Token inv√°lido ou expirado" });
        }
    }
    
    async getUsuarioLogado(req, res) {
        try {
            const userId = req.usuario.id; // Obt√©m o ID do usu√°rio decodificado do token
            console.log("üîç Buscando usu√°rio logado com ID:", userId);
    
            connection.query("SELECT id, nome, email, permissao FROM usuarios WHERE id = ?", [userId], (err, results) => {
                if (err) {
                    console.error("‚ùå Erro ao buscar usu√°rio:", err);
                    return res.status(500).json({ error: "Erro ao buscar usu√°rio" });
                }
    
                if (results.length === 0) {
                    console.log("‚ö†Ô∏è Usu√°rio n√£o encontrado!");
                    return res.status(404).json({ error: "Usu√°rio n√£o encontrado" });
                }
    
                console.log("‚úÖ Usu√°rio logado encontrado:", results[0]);
                res.json({ usuario: results[0] });
            });
    
        } catch (error) {
            console.error("‚ùå Erro ao buscar usu√°rio logado:", error);
            res.status(500).json({ error: "Erro ao recuperar dados do usu√°rio" });
        }
    }
    
    

}    

module.exports = new UsuarioController();

