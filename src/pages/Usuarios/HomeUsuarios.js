import React, { useState, useEffect } from "react";
import usuarioService from "../../services/usuarioService"; // Service para comunica√ß√£o com o backend
import ModalCadastroUsuario from "./CadastroUsuarios"; // Import do modal
import "../../assets/css/usuarios.css"; // Estilo da tabela
import { confirmarAcao, mostrarSucesso, mostrarErro } from "../../components/SweetAlert";
import { useNavigate } from "react-router-dom";

function TabelaUsuarios() {
    const navigate = useNavigate();
    const [usuarios, setUsuarios] = useState([]);
    const [search, setSearch] = useState("");
    const [ordenar, setOrdenar] = useState("nome"); // Campo de ordena√ß√£o
    const [recordsPerPage, setRecordsPerPage] = useState(10); // N√∫mero de registros por p√°gina
    const [currentPage, setCurrentPage] = useState(1);
    const [isModalOpen, setIsModalOpen] = useState(false); // Estado do modal
    const [usuarioSelecionado, setUsuarioSelecionado] = useState(null); // Armazena o usu√°rio para edi√ß√£o

    useEffect(() => {
        carregarUsuarios();
    }, []);

    const carregarUsuarios = async () => {
        try {
            const data = await usuarioService.getAllUsuarios();
            setUsuarios(data);
        } catch (error) {
            mostrarErro("Erro ao buscar usu√°rios", "N√£o foi poss√≠vel carregar a lista de usu√°rios.");
        }
    };

    // Fun√ß√£o chamada ao adicionar ou editar um usu√°rio
    const handleAddUsuario = async (usuario) => {
        const confirmacao = await confirmarAcao(
            usuarioSelecionado ? "Confirmar atualiza√ß√£o?" : "Confirmar cadastro?",
            usuarioSelecionado ? "Deseja realmente atualizar os dados deste usu√°rio?" : "Deseja realmente cadastrar este usu√°rio?"
        );

        if (!confirmacao) return;

        try {
            // Cria uma c√≥pia dos dados para evitar modificar o estado diretamente
            const usuarioParaEnviar = { ...usuario };

            // Se o campo de senha estiver vazio, remov√™-lo da requisi√ß√£o
            if (!usuarioParaEnviar.senha) {
                delete usuarioParaEnviar.senha;
            }

            if (usuarioSelecionado) {
                await usuarioService.atualizarUsuario(usuarioSelecionado.id, usuarioParaEnviar);
                mostrarSucesso("Usu√°rio atualizado!", "Os dados foram atualizados com sucesso.");
            } else {
                await usuarioService.criarUsuario(usuarioParaEnviar);
                mostrarSucesso("Usu√°rio cadastrado!", "O usu√°rio foi adicionado com sucesso.");
            }

            setIsModalOpen(false);
            setUsuarioSelecionado(null);
            carregarUsuarios();
        } catch (error) {
            mostrarErro("Erro ao salvar", "Houve um problema ao salvar o usu√°rio.");
        }
    };

    const handleExcluir = async (id) => {
        const confirmado = await confirmarAcao("Tem certeza?", "Essa a√ß√£o n√£o pode ser desfeita!");

        if (confirmado) {
            try {
                await usuarioService.deletarUsuario(id);
                setUsuarios((prev) => prev.filter((user) => user.id !== id)); // Atualiza a lista ap√≥s excluir
                mostrarSucesso("Usu√°rio Exclu√≠do", "O usu√°rio foi removido com sucesso!");
            } catch (error) {
                mostrarErro("Erro ao Excluir", "Ocorreu um erro ao excluir o usu√°rio.");
            }
        }
    };

    const handleEditar = (usuario) => {
        setUsuarioSelecionado(usuario);
        setIsModalOpen(true);
    };

    // üîπ Filtrando e ordenando usu√°rios
    const usuariosFiltrados = usuarios
        .filter((usuario) => usuario.nome.toLowerCase().includes(search.toLowerCase()))
        .sort((a, b) => (a[ordenar] > b[ordenar] ? 1 : -1));

    // üîπ Pagina√ß√£o: c√°lculo dos registros na p√°gina atual
    const indexOfLastRecord = currentPage * recordsPerPage;
    const indexOfFirstRecord = indexOfLastRecord - recordsPerPage;
    const currentRecords = usuariosFiltrados.slice(indexOfFirstRecord, indexOfLastRecord);

    // üîπ C√°lculo do total de p√°ginas
    const totalPages = Math.ceil(usuariosFiltrados.length / recordsPerPage);

    // üîπ Fun√ß√µes de navega√ß√£o
    const goToFirstPage = () => setCurrentPage(1);
    const prevPage = () => setCurrentPage((prev) => Math.max(prev - 1, 1));
    const nextPage = () => setCurrentPage((prev) => Math.min(prev + 1, totalPages));
    const goToLastPage = () => setCurrentPage(totalPages);

    return (
        <div className="tabela-container">
            <div className="title-homeusuarios">
            <button className="back-button-tipoconsulta" onClick={() => navigate(-1)}>‚¨Ö Voltar</button>    
            <h1>Gerenciamento de Usu√°rios</h1>
            </div>
            <div className="filtros">
                <input
                    type="text"
                    placeholder="Pesquisar por nome"
                    value={search}
                    onChange={(e) => setSearch(e.target.value)}
                />

                <select value={ordenar} onChange={(e) => setOrdenar(e.target.value)}>
                    <option value="nome">Ordenar por Nome</option>
                    <option value="email">Ordenar por Email</option>
                </select>

                <select value={recordsPerPage} onChange={(e) => setRecordsPerPage(Number(e.target.value))}>
                    <option value={5}>Exibir 5</option>
                    <option value={10}>Exibir 10</option>
                    <option value={20}>Exibir 20</option>
                </select>

                <button
                    className="botao-adicionar"
                    onClick={() => {
                        setUsuarioSelecionado(null);
                        setIsModalOpen(true);
                    }}
                >
                    Adicionar Usu√°rio
                </button>
            </div>

            {/* Tabela de usu√°rios */}
            <table>
                <thead>
                    <tr>
                        <th>Nome</th>
                        <th>Email</th>
                        <th>Permiss√£o</th>
                        <th>Desabilitado</th>
                        <th>A√ß√µes</th>
                    </tr>
                </thead>
                <tbody>
                    {currentRecords.map((usuario) => (
                        <tr key={usuario.id}>
                            <td>{usuario.nome}</td>
                            <td>{usuario.email}</td>
                            <td>{usuario.permissao}</td>
                            <td>{usuario.desabilitado ? "Sim" : "N√£o"}</td>
                            <td>
                                <button onClick={() => handleEditar(usuario)}>‚úèÔ∏è</button>
                                <button onClick={() => handleExcluir(usuario.id)}>‚ùå</button>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>

            {/* Controles de Pagina√ß√£o */}
            <div className="pagination">
                <button onClick={goToFirstPage} disabled={currentPage === 1}>
                    ‚èÆ Primeira
                </button>
                <button onClick={prevPage} disabled={currentPage === 1}>
                    ‚¨Ö Anterior
                </button>
                <span>P√°gina {currentPage} de {totalPages}</span>
                <button onClick={nextPage} disabled={currentPage === totalPages}>
                    Pr√≥xima ‚û°
                </button>
                <button onClick={goToLastPage} disabled={currentPage === totalPages}>
                    √öltima ‚è≠
                </button>
            </div>

            {/* Modal de Cadastro/Edi√ß√£o */}
            <ModalCadastroUsuario
                isOpen={isModalOpen}
                onClose={() => {
                    setIsModalOpen(false);
                    setUsuarioSelecionado(null);
                }}
                usuarioEditado={usuarioSelecionado}
                onSubmit={handleAddUsuario}
            />
        </div>
    );
}

export default TabelaUsuarios;
